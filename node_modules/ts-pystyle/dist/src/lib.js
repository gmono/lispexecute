"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spread = (this && this.__spread) || function () {
    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));
    return ar;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.cached = exports.curry = exports.call = exports.mapToObj = exports.len = exports.keys = exports.set = exports.zipToDict = exports.dict = exports.list = exports.isAsyncIter = exports.isIter = exports.trustType = exports.assertType = exports.assert = exports.parse = exports.json = exports.float = exports.str = exports.int = exports.insert = exports.max = exports.min = exports.sample = exports.extract = exports.byIdx = exports.sorted = exports.shuffle = exports.cartesian = exports.zip = exports.error = exports.print = exports.equal = exports.not = exports.all = exports.any = exports.enumerate = exports.range = exports.randint = exports.delay = void 0;
function delay(mis) {
    return __awaiter(this, void 0, void 0, function () {
        return __generator(this, function (_a) {
            return [2, new Promise(function (resolve) {
                    setTimeout(function () {
                        resolve();
                    }, mis);
                })];
        });
    });
}
exports.delay = delay;
function randint(max) {
    return Math.floor(Math.random() * max) % max;
}
exports.randint = randint;
function range(start, space, end) {
    var i;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (!(space == null && end == null)) return [3, 2];
                return [5, __values(range(0, 1, start))];
            case 1:
                _a.sent();
                return [3, 8];
            case 2:
                if (!(end == null)) return [3, 4];
                return [5, __values(range(start, 1, space))];
            case 3:
                _a.sent();
                return [3, 8];
            case 4:
                i = start;
                _a.label = 5;
            case 5:
                if (!(i < end)) return [3, 8];
                return [4, i];
            case 6:
                _a.sent();
                _a.label = 7;
            case 7:
                i += space;
                return [3, 5];
            case 8: return [2];
        }
    });
}
exports.range = range;
function enumerate(arraylike) {
    var now, arraylike_1, arraylike_1_1, a, e_1_1;
    var e_1, _a;
    return __generator(this, function (_b) {
        switch (_b.label) {
            case 0:
                now = 0;
                _b.label = 1;
            case 1:
                _b.trys.push([1, 6, 7, 8]);
                arraylike_1 = __values(arraylike), arraylike_1_1 = arraylike_1.next();
                _b.label = 2;
            case 2:
                if (!!arraylike_1_1.done) return [3, 5];
                a = arraylike_1_1.value;
                return [4, [now++, a]];
            case 3:
                _b.sent();
                _b.label = 4;
            case 4:
                arraylike_1_1 = arraylike_1.next();
                return [3, 2];
            case 5: return [3, 8];
            case 6:
                e_1_1 = _b.sent();
                e_1 = { error: e_1_1 };
                return [3, 8];
            case 7:
                try {
                    if (arraylike_1_1 && !arraylike_1_1.done && (_a = arraylike_1.return)) _a.call(arraylike_1);
                }
                finally { if (e_1) throw e_1.error; }
                return [7];
            case 8: return [2];
        }
    });
}
exports.enumerate = enumerate;
function any(arraylike) {
    var e_2, _a;
    try {
        for (var arraylike_2 = __values(arraylike), arraylike_2_1 = arraylike_2.next(); !arraylike_2_1.done; arraylike_2_1 = arraylike_2.next()) {
            var a = arraylike_2_1.value;
            if (a)
                return true;
        }
    }
    catch (e_2_1) { e_2 = { error: e_2_1 }; }
    finally {
        try {
            if (arraylike_2_1 && !arraylike_2_1.done && (_a = arraylike_2.return)) _a.call(arraylike_2);
        }
        finally { if (e_2) throw e_2.error; }
    }
    return false;
}
exports.any = any;
function all(arraylike) {
    return !any(not(arraylike));
}
exports.all = all;
function not(arraylike) {
    var e_3, _a;
    var ar = [];
    try {
        for (var arraylike_3 = __values(arraylike), arraylike_3_1 = arraylike_3.next(); !arraylike_3_1.done; arraylike_3_1 = arraylike_3.next()) {
            var a = arraylike_3_1.value;
            ar.push(!a);
        }
    }
    catch (e_3_1) { e_3 = { error: e_3_1 }; }
    finally {
        try {
            if (arraylike_3_1 && !arraylike_3_1.done && (_a = arraylike_3.return)) _a.call(arraylike_3);
        }
        finally { if (e_3) throw e_3.error; }
    }
    return ar;
}
exports.not = not;
function equal(ar, dest) {
    var e_4, _a, e_5, _b;
    var ret = [];
    if (Symbol.iterator in dest) {
        if (trustType(dest))
            try {
                for (var _c = __values(zip(ar, dest)), _d = _c.next(); !_d.done; _d = _c.next()) {
                    var _e = __read(_d.value, 2), a = _e[0], b = _e[1];
                    ret.push(a.__equal__(b));
                }
            }
            catch (e_4_1) { e_4 = { error: e_4_1 }; }
            finally {
                try {
                    if (_d && !_d.done && (_a = _c.return)) _a.call(_c);
                }
                finally { if (e_4) throw e_4.error; }
            }
    }
    else {
        try {
            for (var ar_1 = __values(ar), ar_1_1 = ar_1.next(); !ar_1_1.done; ar_1_1 = ar_1.next()) {
                var a = ar_1_1.value;
                if (trustType(dest))
                    ret.push(a.__equal__(dest));
            }
        }
        catch (e_5_1) { e_5 = { error: e_5_1 }; }
        finally {
            try {
                if (ar_1_1 && !ar_1_1.done && (_b = ar_1.return)) _b.call(ar_1);
            }
            finally { if (e_5) throw e_5.error; }
        }
    }
    return ret;
}
exports.equal = equal;
function print() {
    var data = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        data[_i] = arguments[_i];
    }
    console.log.apply(console, __spread(data));
}
exports.print = print;
function error(msg) {
    if (msg === void 0) { msg = ""; }
    throw new Error(msg);
}
exports.error = error;
function zip() {
    var _i, itors, arraylikes_1, arraylikes_1_1, a, ress;
    var e_6, _a;
    var arraylikes = [];
    for (_i = 0; _i < arguments.length; _i++) {
        arraylikes[_i] = arguments[_i];
    }
    return __generator(this, function (_b) {
        switch (_b.label) {
            case 0:
                if (!trustType(arraylikes))
                    return [2];
                if (len(arraylikes) == 0)
                    return [2];
                if (len(arraylikes) == 1) {
                    arraylikes = arraylikes[0];
                }
                itors = [];
                try {
                    for (arraylikes_1 = __values(arraylikes), arraylikes_1_1 = arraylikes_1.next(); !arraylikes_1_1.done; arraylikes_1_1 = arraylikes_1.next()) {
                        a = arraylikes_1_1.value;
                        itors.push(a[Symbol.iterator]());
                    }
                }
                catch (e_6_1) { e_6 = { error: e_6_1 }; }
                finally {
                    try {
                        if (arraylikes_1_1 && !arraylikes_1_1.done && (_a = arraylikes_1.return)) _a.call(arraylikes_1);
                    }
                    finally { if (e_6) throw e_6.error; }
                }
                _b.label = 1;
            case 1:
                ress = itors.map(function (v) { return v.next(); });
                if (!any(ress.map(function (v) { return v.done; }))) return [3, 2];
                return [2, undefined];
            case 2: return [4, ress.map(function (v) { return v.value; })];
            case 3:
                _b.sent();
                _b.label = 4;
            case 4: return [3, 1];
            case 5: return [2];
        }
    });
}
exports.zip = zip;
function _cartesian(a, b) {
    var ar, first, a_1, a_1_1, t, s, s_1, s_1_1, tt, e_7_1, e_8_1;
    var e_8, _a, e_7, _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                ar = [];
                first = true;
                _c.label = 1;
            case 1:
                _c.trys.push([1, 13, 14, 15]);
                a_1 = __values(a), a_1_1 = a_1.next();
                _c.label = 2;
            case 2:
                if (!!a_1_1.done) return [3, 12];
                t = a_1_1.value;
                s = first ? b : ar;
                _c.label = 3;
            case 3:
                _c.trys.push([3, 8, 9, 10]);
                s_1 = (e_7 = void 0, __values(s)), s_1_1 = s_1.next();
                _c.label = 4;
            case 4:
                if (!!s_1_1.done) return [3, 7];
                tt = s_1_1.value;
                return [4, [t, tt]];
            case 5:
                _c.sent();
                first && ar.push(tt);
                _c.label = 6;
            case 6:
                s_1_1 = s_1.next();
                return [3, 4];
            case 7: return [3, 10];
            case 8:
                e_7_1 = _c.sent();
                e_7 = { error: e_7_1 };
                return [3, 10];
            case 9:
                try {
                    if (s_1_1 && !s_1_1.done && (_b = s_1.return)) _b.call(s_1);
                }
                finally { if (e_7) throw e_7.error; }
                return [7];
            case 10:
                first = false;
                _c.label = 11;
            case 11:
                a_1_1 = a_1.next();
                return [3, 2];
            case 12: return [3, 15];
            case 13:
                e_8_1 = _c.sent();
                e_8 = { error: e_8_1 };
                return [3, 15];
            case 14:
                try {
                    if (a_1_1 && !a_1_1.done && (_a = a_1.return)) _a.call(a_1);
                }
                finally { if (e_8) throw e_8.error; }
                return [7];
            case 15: return [2];
        }
    });
}
function cartesian() {
    var _i, _a, _b, _c, a, b, e_9_1;
    var e_9, _d;
    var args = [];
    for (_i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    return __generator(this, function (_e) {
        switch (_e.label) {
            case 0:
                if (!(len(args) == 2)) return [3, 2];
                return [5, __values(_cartesian(args[0], args[1]))];
            case 1:
                _e.sent();
                return [3, 9];
            case 2:
                _e.trys.push([2, 7, 8, 9]);
                _a = __values(_cartesian(args[0], cartesian.apply(void 0, __spread(args.slice(1))))), _b = _a.next();
                _e.label = 3;
            case 3:
                if (!!_b.done) return [3, 6];
                _c = __read(_b.value, 2), a = _c[0], b = _c[1];
                return [4, __spread([a], b)];
            case 4:
                _e.sent();
                _e.label = 5;
            case 5:
                _b = _a.next();
                return [3, 3];
            case 6: return [3, 9];
            case 7:
                e_9_1 = _e.sent();
                e_9 = { error: e_9_1 };
                return [3, 9];
            case 8:
                try {
                    if (_b && !_b.done && (_d = _a.return)) _d.call(_a);
                }
                finally { if (e_9) throw e_9.error; }
                return [7];
            case 9: return [2];
        }
    });
}
exports.cartesian = cartesian;
var denque_1 = __importDefault(require("denque"));
function shuffle(arl) {
    var e_10, _a;
    var dq = new denque_1.default();
    var a = list(arl);
    var idxs = list(range(len(a)));
    idxs.forEach(function (v) { return dq.push(v); });
    var r = new Array(len(a));
    try {
        for (var a_2 = __values(a), a_2_1 = a_2.next(); !a_2_1.done; a_2_1 = a_2.next()) {
            var t = a_2_1.value;
            var i = randint(len(dq));
            var idx = dq.get(i);
            dq.removeOne(i);
            r[idx] = t;
        }
    }
    catch (e_10_1) { e_10 = { error: e_10_1 }; }
    finally {
        try {
            if (a_2_1 && !a_2_1.done && (_a = a_2.return)) _a.call(a_2);
        }
        finally { if (e_10) throw e_10.error; }
    }
    return r;
}
exports.shuffle = shuffle;
function sorted(arl, key, sorttype) {
    if (key === void 0) { key = null; }
    if (sorttype === void 0) { sorttype = "ASC"; }
    var ret = list(arl).sort(function (a, b) {
        var _a = __read([-key(a), -key(b)], 2), k = _a[0], kk = _a[1];
        return k - kk;
    });
    return ret;
}
exports.sorted = sorted;
function byIdx(arl, idxs) {
    var l = list(arl);
    var ret = idxs.map(function (v) { return l[v]; });
    return ret;
}
exports.byIdx = byIdx;
function extract(arl, count) {
    var a = list(arl);
    var idx = shuffle(range(len(a))).slice(0, count);
    return byIdx(a, idx);
}
exports.extract = extract;
function sample(arl, count) {
    var a = list(arl);
    var idx = list(range(len(a))).map(function (v) { return randint(len(a)); });
    return byIdx(a, idx);
}
exports.sample = sample;
exports.min = Math.min;
exports.max = Math.max;
function insert(arl, point, val) {
    var newar = [];
    var a = list(arl);
    a.forEach(function (v, idx) {
        if (point == idx)
            newar.push(val);
        newar.push(v);
    });
    if (len(a) == point)
        newar.push(val);
    return newar;
}
exports.insert = insert;
function int(other) {
    if (typeof other == "string")
        return parseInt(other);
    else if (typeof other == "number")
        return other | 0;
    else if ("toInt" in other) {
        return other.toInt();
    }
    else
        return 0;
}
exports.int = int;
function str(n) {
    if (assertType(n, "object")) {
        return n.toString();
    }
    else if (assertType(n, "string"))
        return n;
    else
        return new Number(n).toString();
}
exports.str = str;
function float(other) {
    if (typeof other == "string")
        return parseFloat(other);
    else if (typeof other == "number")
        return other;
    else if ("toFloat" in other) {
        return other.toFloat();
    }
    else
        return 0;
}
exports.float = float;
function json(obj) {
    return JSON.stringify(obj);
}
exports.json = json;
function parse(json) {
    return JSON.parse(json);
}
exports.parse = parse;
function assert(n, msg) {
    if (!n)
        throw new Error(msg !== null && msg !== void 0 ? msg : "错误");
}
exports.assert = assert;
function assertType(a, b) {
    if (typeof b == "string")
        return typeof a == b;
    else if (typeof b == "function")
        return a instanceof b;
}
exports.assertType = assertType;
assertType([], Array);
function trustType(o) {
    return true;
}
exports.trustType = trustType;
function isIter(a) {
    return Symbol.iterator in a;
}
exports.isIter = isIter;
function isAsyncIter(a) {
    return Symbol.asyncIterator in a && !(Symbol.iterator in a);
}
exports.isAsyncIter = isAsyncIter;
function list(iter) {
    var e_11, _a;
    if (iter == null)
        return list([]);
    var ret = [];
    try {
        for (var iter_1 = __values(iter), iter_1_1 = iter_1.next(); !iter_1_1.done; iter_1_1 = iter_1.next()) {
            var a = iter_1_1.value;
            ret.push(a);
        }
    }
    catch (e_11_1) { e_11 = { error: e_11_1 }; }
    finally {
        try {
            if (iter_1_1 && !iter_1_1.done && (_a = iter_1.return)) _a.call(iter_1);
        }
        finally { if (e_11) throw e_11.error; }
    }
    return ret;
}
exports.list = list;
function dict(arl) {
    return new Map(arl);
}
exports.dict = dict;
function zipToDict(ks, vs) {
    return dict(zip(ks, vs));
}
exports.zipToDict = zipToDict;
function set(arl) {
    return new Set(arl);
}
exports.set = set;
function keys(obj) {
    var _a, _b, a, e_12_1, _c, _d, _i, k;
    var e_12, _e;
    return __generator(this, function (_f) {
        switch (_f.label) {
            case 0:
                if (!(obj instanceof Map)) return [3, 9];
                _f.label = 1;
            case 1:
                _f.trys.push([1, 6, 7, 8]);
                _a = __values(obj.keys()), _b = _a.next();
                _f.label = 2;
            case 2:
                if (!!_b.done) return [3, 5];
                a = _b.value;
                return [4, a];
            case 3:
                _f.sent();
                _f.label = 4;
            case 4:
                _b = _a.next();
                return [3, 2];
            case 5: return [3, 8];
            case 6:
                e_12_1 = _f.sent();
                e_12 = { error: e_12_1 };
                return [3, 8];
            case 7:
                try {
                    if (_b && !_b.done && (_e = _a.return)) _e.call(_a);
                }
                finally { if (e_12) throw e_12.error; }
                return [7];
            case 8: return [3, 13];
            case 9:
                if (!(typeof obj == "object")) return [3, 13];
                _c = [];
                for (_d in obj)
                    _c.push(_d);
                _i = 0;
                _f.label = 10;
            case 10:
                if (!(_i < _c.length)) return [3, 13];
                k = _c[_i];
                return [4, k];
            case 11:
                _f.sent();
                _f.label = 12;
            case 12:
                _i++;
                return [3, 10];
            case 13: return [2];
        }
    });
}
exports.keys = keys;
function len(obj) {
    if ("length" in obj) {
        return obj.length;
    }
    else if ("size" in obj) {
        return obj.size;
    }
    else if ("count" in obj) {
        return obj.count;
    }
    else if ("__len__" in obj) {
        return obj.__len__();
    }
    else if (Symbol.iterator in obj) {
        if (trustType(obj))
            return len(list(obj));
    }
    else if (typeof obj == "object") {
        var s = 0;
        for (var i in obj) {
            s++;
        }
        return s;
    }
}
exports.len = len;
function mapToObj(map) {
    if (map === void 0) { map = new Map(); }
    var r = new Proxy({}, {
        get: function (target, p, receiver) {
            return map.get(p);
        },
        set: function (target, p, value, receive) {
            map.set(p, value);
            return true;
        },
        has: function (target, p) {
            return map.has(p);
        },
        deleteProperty: function (target, p) {
            return map.delete(p);
        },
        defineProperty: function (target, p, attributes) {
            map.set(p, attributes.value);
            return true;
        },
        ownKeys: function (target) {
            return list(map.keys());
        }
    });
    return r;
}
exports.mapToObj = mapToObj;
function call(func) {
    func();
}
exports.call = call;
function curryfunc(f, nowlist) {
    if (nowlist === void 0) { nowlist = []; }
    return (function (a) {
        var n = len(nowlist) + 1;
        var t = nowlist.concat([a]);
        if (n == len(f)) {
            return f.apply(void 0, __spread(t));
        }
        else {
            return curryfunc(f, t);
        }
    });
}
var tsss;
function _curry(r) {
    function retfunc() {
        var e_13, _a;
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        var now = r;
        try {
            for (var args_1 = __values(args), args_1_1 = args_1.next(); !args_1_1.done; args_1_1 = args_1.next()) {
                var a = args_1_1.value;
                now = now(a);
            }
        }
        catch (e_13_1) { e_13 = { error: e_13_1 }; }
        finally {
            try {
                if (args_1_1 && !args_1_1.done && (_a = args_1.return)) _a.call(args_1);
            }
            finally { if (e_13) throw e_13.error; }
        }
        return now;
    }
    return retfunc;
}
function curry(f, now, raw) {
    if (now === void 0) { now = 0; }
    if (raw === void 0) { raw = null; }
    if (raw == null)
        raw = f;
    var r = curryfunc(f);
    var c = _curry(r);
    var ret = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        var tt = c.apply(void 0, __spread(args));
        if (now + len(args) == len(raw))
            return tt;
        var t = curry(tt, now + len(args), raw);
        return t;
    };
    return ret;
}
exports.curry = curry;
var clone_1 = __importDefault(require("clone"));
var fast_deep_equal_1 = __importDefault(require("fast-deep-equal"));
function cached(func) {
    var hascalled = false;
    var oldresult = null;
    var oldargs = null;
    return function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        if (!hascalled || oldargs !== args || !fast_deep_equal_1.default(args, oldargs)) {
            hascalled = true;
            oldresult = func.apply(void 0, __spread(args));
            oldargs = clone_1.default(args);
            return oldresult;
        }
    };
}
exports.cached = cached;
function lazy(f) {
}
