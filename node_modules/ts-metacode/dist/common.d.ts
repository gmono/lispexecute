import { Tree } from './tree';
import { Length, Slice } from './array';
import { sMoreThan, Ten, Zero } from '.';
import { SNum } from './math';
export declare type MapUnit<A, B, args extends any[] = []> = [A, B, ...args];
export declare type None = {};
declare type _MapType<T, A extends any[]> = A extends [infer Now, ...infer S] ? Now extends MapUnit<infer From, infer To, infer Args> ? T extends From ? To : _MapType<T, S> : never : T;
export declare type MapTypeLong<T, A extends any[], seg extends SNum = Ten> = _MapType<T, Slice<A, Zero, seg>> extends T ? (sMoreThan<Length<A>, seg> extends [true] ? MapTypeLong<T, Slice<A, seg>, seg> : _MapType<T, A>) : _MapType<T, Slice<A, Zero, seg>>;
declare type MapTypeTree<T, A extends any[]> = A extends [infer left, infer right] ? (left extends any[] ? right extends any[] ? (MapTypeTree<T, left> extends T ? MapTypeTree<T, right> : MapTypeTree<T, left>) : _MapType<T, [A]> : _MapType<T, [A]>) : _MapType<T, [A]>;
export declare type MapType<T, A extends any[]> = MapTypeTree<T, Tree<A>>;
export {};
