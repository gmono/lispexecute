export declare type CanBeString = string | number | bigint | boolean | null | undefined;
export declare type JOIN<x extends CanBeString[], sep extends CanBeString = ""> = x extends [] ? "" : x extends [infer s, ...infer rest] ? s extends CanBeString ? rest extends [] ? `${s}` : (rest extends CanBeString[] ? `${s}${sep}${JOIN<rest, sep>}` : never) : never : never;
export declare type Split<x extends CanBeString, sep extends CanBeString> = x extends "" ? [] : (x extends `${infer cont}${sep}${infer rest}` ? ([
    cont,
    ...Split<rest, sep>
]) : [x]);
declare type FillWithChar1<str extends string, rep extends string> = str extends `${infer F}${infer rest}` ? `${rep}${FillWithChar1<rest, rep>}` : str;
declare type FillWithChar2<str extends string, rep extends string> = str extends `${infer F}${infer ff}${infer rest}` ? `${rep}${rep}${FillWithChar2<rest, rep>}` : FillWithChar1<str, rep>;
declare type FillWithChar4<str extends string, rep extends string> = str extends `${infer F}${infer ff}${infer F}${infer ff}${infer rest}` ? `${rep}${rep}${rep}${rep}${FillWithChar4<rest, rep>}` : FillWithChar2<str, rep>;
export declare type FillWithChar<str extends string, rep extends string> = str extends `${infer F}${infer ff}${infer F}${infer ff}${infer F}${infer ff}${infer F}${infer ff}${infer rest}` ? `${rep}${rep}${rep}${rep}${rep}${rep}${rep}${rep}${FillWithChar<rest, rep>}` : FillWithChar4<str, rep>;
export declare type StrLength<a extends string> = FillWithChar<a, "x">;
export {};
