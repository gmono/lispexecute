import { MapUnit, MapElement, Zip } from ".";
export declare type If<cond, then, Else> = cond extends [true] ? then : Else;
export declare type Equal<a, b> = a extends b ? [true] : [false];
export declare type RMapUnit<a, b, c> = MapUnit<[a, b], c>;
export declare type NOT<a> = MapElement<a, [
    [
        true,
        false
    ],
    [
        false,
        true
    ]
]>;
export declare type AND<a, b> = MapElement<Zip<a, b>, [
    RMapUnit<true, false, false>,
    RMapUnit<false, false, false>,
    RMapUnit<false, true, false>,
    RMapUnit<true, true, true>
]>;
export declare type XOR<a, b> = OR<AND<a, NOT<b>>, AND<b, NOT<a>>>;
export declare type XNOR<a, b> = NOT<XOR<a, b>>;
export declare type INFER<a, b> = OR<NOT<a>, b>;
export declare type EQ<a, b> = AND<INFER<a, b>, INFER<b, a>>;
export declare type OR<a, b> = NOT<AND<NOT<a>, NOT<b>>>;
export declare type ALL<s extends boolean[]> = s extends [infer x, ...infer rest] ? (x extends false ? [false] : (rest extends boolean[] ? ALL<rest> : never)) : [true];
export declare type ANY<s extends boolean[]> = NOT<ALL<NOT<s>>>;
