import { sEqual, Zero, One, Dec } from './math';
import { Head, Length, Slice, Tail } from './array';
import { CanBeString } from './string';
export declare type TypeNameList = RawTypeNameList | "object" | "function";
export declare type RawTypeNameList = "string" | "number" | "bigint" | "boolean" | "symbol" | "undefined";
export declare type RawTypeList = string | number | bigint | boolean | symbol | undefined;
export declare type TypeList = RawTypeList | object | Function;
export declare type TypeMap<tp extends TypeList> = tp extends string ? "string" : tp extends number ? "number" : tp extends bigint ? "bigint" : tp extends boolean ? "boolean" : tp extends symbol ? "symbol" : tp extends Function ? "function" : tp extends undefined ? "undefined" : tp extends object ? "object" : never;
export declare type TypeNameMap<name extends TypeNameList> = name extends "string" ? string : name extends "number" ? number : name extends "bigint" ? bigint : name extends "boolean" ? boolean : name extends "symbol" ? symbol : name extends "function" ? Function : name extends "undefined" ? undefined : name extends "object" ? object : never;
export declare type ClassType = new (...args: any[]) => any;
declare type _StringifyArray<ar extends any[]> = sEqual<Length<ar>, Zero> extends [true] ? "" : sEqual<Length<ar>, One> extends [true] ? (Head<ar> extends TypeList ? TypeMap<Head<ar>> : Head<ar> extends CanBeString ? `${Head<ar>}` : never) : `${_StringifyArray<Slice<ar, Dec<0>, One>>},${_StringifyArray<Tail<ar>>}`;
export declare type StringifyTuple<ar extends any[]> = `[${_StringifyArray<ar>}]`;
export {};
